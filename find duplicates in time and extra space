Given an array of n elements that contains elements from 0 to n-1, with any of these numbers appearing any number of times. 
Find these repeating numbers in O(n) and use only constant memory space in java  


SOLUTION:-

import java.util.ArrayList;
import java.util.List;

public class RepeatingNumbers {

    public static List<Integer> findRepeatingNumbers(int[] arr) {
        List<Integer> result = new ArrayList<>();

        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int index = arr[i] % n;
            arr[index] += n;
        }

        for (int i = 0; i < n; i++) {
            if (arr[i] >= n * 2) {
                result.add(i);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 1, 3, 6, 6};
        List<Integer> repeatingNumbers = findRepeatingNumbers(arr);
        System.out.println("Repeating numbers are: " + repeatingNumbers);
    }
}
